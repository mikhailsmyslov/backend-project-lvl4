mixin formFor(options = {})
  - const { url, method = "get" } = options;
  - const isStandard = ["get", "post"].includes(method);
  form(action=url, method=isStandard ? method : "post")&attributes(attributes)
    if (!isStandard)
      input(name='_method', type='hidden', value=method)
    block

mixin input(formObj, property, options = {})
  - const value = formObj.data[property] || "";
  - const errors = formObj.errors[property];
  - const { placeholder = "", type = "text", feedback = true } = options;
    .form-group
      input.form-control(
        class=errors ? "is-invalid" : "",
        name=property,
        type=type,
        value=value,
        placeholder=placeholder,
        required
      )&attributes(attributes)
      .invalid-feedback
        = errors ? errors.map(({ message }) => message).join(". ") : ""

mixin datepicker(formObj, property, options = { type: 'text', placeholder: '' })
  - const rawValue = formObj.data[property] || "";
  - const formattedValue = rawValue ? moment(rawValue).format("MM/DD/YYYY") : "";
  - const errors = formObj.errors[property];
  - const { placeholder, type } = options;
  .form-group
    input.datepicker.form-control.form-control-sm(
      class=errors ? "is-invalid" : "",
      name=property,
      type=type,
      value=formattedValue,
      placeholder=placeholder,
      autocomplete="off",
    )&attributes(attributes)
    .invalid-feedback
      = errors ? errors.map(({ message }) => message).join(". ") : ""

mixin textarea(formObj, property, options = { placeholder: '' })
  - const value = formObj.data[property] || "";
  - const errors = formObj.errors[property];
  - const { placeholder } = options;
  .form-group
    textarea.form-control(name=property, type='text', placeholder=placeholder)&attributes(attributes)= value

mixin button(options = { type: 'submit', value: '' })
  - const { type, value } = options;
  .form-group
    button.btn(type=type)&attributes(attributes)= value
      block

mixin filterSelect(list, property, formObj, options = {})
  - const selectedNormalizedValues = _.flattenDeep([formObj.data[property]]).map(v => String(v));
  - const isSelectedOption = value => selectedNormalizedValues.includes(value);
  - const { valueKey = "id", nameKey = "name", additionalOptions = [] } = options;
    select.selectpicker.form-control.form-control-sm(
      name=property,
      multiple,
      data-live-search='true',
      title=title
    )&attributes(attributes)
      each option in additionalOptions
          option(value=option.value, selected=isSelectedOption(option.value))= option.name
      if !_.isEmpty(additionalOptions)
        option(data-divider='true')
      each item in list
        - const value = item[valueKey].toString();
        if item.color
          option(
            value=value,
            selected=isSelectedOption(value),
            data-content= `
              <div style="display:flex;align-items: center;justify-content:space-between;">
                <div>${item[nameKey]}</div>
                <div style="width:20px;height:20px;background:${item.color};"></div>
              </div>
            `
          )
        else        
          option(value=value, selected=isSelectedOption(value))= item[nameKey]            
